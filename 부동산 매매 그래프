import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# 엑셀 파일 읽기
df = pd.read_excel("./officetel.xlsx", dtype=str)

# 16번째 열(인덱스 15)에 숫자가 포함된 행 제거
df = df[~df.iloc[:, 15].str.contains(r'\d', na=False)]

# 매매 금액과 전용 면적을 숫자로 변환
df["거래금액(만원)"] = df["거래금액(만원)"].str.replace(",", "").astype(float)
df["전용면적(㎡)"] = df["전용면적(㎡)"].astype(float)

# "시군구" 열에서 구 이름 추출
df["구"] = df["시군구"].str.split().str[1]


# 계약년월 컬럼에서 결측값을 '000000'으로 채움
df["계약년월"] = df["계약년월"].fillna("000000")

# 계약년월 컬럼에서 년도와 월 분리
df["계약년"] = df["계약년월"].str[:4].astype(int)
df["계약월"] = df["계약년월"].str[4:].astype(int)


# 분기 계산 함수 정의
def get_quarter(month):
    if month in [1, 2, 3]:
        return "1st Quarter"
    elif month in [4, 5, 6]:
        return "2nd Quarter"
    elif month in [7, 8, 9]:
        return "3rd Quarter"
    else:
        return "4th Quarter"

# 분기 열 추가
df["분기"] = df["계약월"].apply(get_quarter)

# 생활권 구역 정의
regions = {
    "Zone 1 (urban living area)": ["종로구", "중구", "용산구"],
    "Zone 2 (Northeast Living Area)": ["도봉구", "강북구", "노원구", "성북구", "중랑구", "동대문구", "성동구", "광진구"],
    "Zone 3 (Southeast Living Area)": ["강동구", "송파구", "강남구", "서초구"],
    "Zone 4 (Southwest Living Area)": ["관악구", "동작구", "금천구", "영등포구", "구로구", "양천구", "강서구"],
    "Zone 5 (Northwest Living Area)": ["마포구", "서대문구", "은평구"]
}

# 분석할 연도 리스트
years = [2020, 2021, 2022, 2023, 2024]

# 연도와 분기를 결합하여 x축 레이블 만들기
quarters = [f"{year}_{i+1}_quarter" for year in years for i in range(4)]

# 그래프 시각화 함수
def plot_price(df, regions, years, quarters, price_type='average'):
    """
    오피스텔 가격 시각화 함수
    - df: 데이터프레임
    - regions: 생활권 딕셔너리
    - years: 분석할 연도 리스트
    - quarters: 분기 리스트
    - price_type: 'average', 'min', 'max' 중 선택
    """   
    # 그래프 제목, Y축 레이블, 스타일 설정
    titles = {
        'average': ("Average Officetel Price per Pyeong by Living Area", "Average Price per Pyeong (10,000 won)", '-'),
        'min': ("Minimum Officetel Transaction Price by Living Area", "Minimum Transaction Price (10,000 won)", '--'),
        'max': ("Maximum Officetel Transaction Price by Living Area", "Maximum Transaction Price (10,000 won)", '-.')
    }

    title, ylabel, linestyle = titles[price_type]

    plt.figure(figsize=(12, 8))
    plt.title(title, fontsize=16)

    # 생활권별 데이터 처리 및 시각화
    for region_name, gu_list in regions.items():
        region_data = df[df["구"].isin(gu_list)]
        prices = []

        for year in years:
            data_year = region_data[region_data["계약년"] == year]
            for quarter in ["1st Quarter", "2nd Quarter", "3rd Quarter", "4th Quarter"]:
                quarter_data = data_year[data_year["분기"] == quarter]

                if not quarter_data.empty:
                    if price_type == 'average':
                        price = quarter_data["거래금액(만원)"].sum() / quarter_data["전용면적(㎡)"].sum()
                    elif price_type == 'min':
                        price = quarter_data["거래금액(만원)"].min()
                    elif price_type == 'max':
                        price = quarter_data["거래금액(만원)"].max()
                else:
                    price = np.nan
                prices.append(price)

        plt.plot(quarters, prices, marker='o', linestyle=linestyle, label=region_name)

    plt.xlabel("Year_Quarter")
    plt.ylabel(ylabel)
    plt.xticks(rotation=45)
    plt.legend()
    plt.grid(True)

    # 최대 매매가 시각화 시 천 단위 쉼표 표시
    if price_type == 'max':
        plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(x):,}'))

    plt.tight_layout()
    plt.show()

# 함수 호출하여 시각화
plot_price(df, regions, years, quarters, price_type='average')  # 평균 평당 매매가격
plot_price(df, regions, years, quarters, price_type='min')      # 최소 매매가격
plot_price(df, regions, years, quarters, price_type='max')      # 최대 매매가격
